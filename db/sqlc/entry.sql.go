// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: entry.sql

package db

import (
	"context"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (
    account_id,
    amount
    ) VALUES (
    $1,
    $2
    ) RETURNING id, account_id, amount, created_at
`

type CreateEntryParams struct {
	AccountID int64 `json:"account_id"`
	Amount    int64 `json:"amount"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntry, arg.AccountID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEntry = `-- name: DeleteEntry :exec
DELETE FROM entries
WHERE id = $1
`

func (q *Queries) DeleteEntry(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEntry, id)
	return err
}

const getEntries = `-- name: GetEntries :many
SELECT id, account_id, amount, created_at FROM entries
WHERE account_id = $1
ORDER BY id DESC
OFFSET $2
LIMIT $3
`

type GetEntriesParams struct {
	AccountID int64 `json:"account_id"`
	Offset    int32 `json:"offset"`
	Limit     int32 `json:"limit"`
}

func (q *Queries) GetEntries(ctx context.Context, arg GetEntriesParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, getEntries, arg.AccountID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntriesCount = `-- name: GetEntriesCount :one
SELECT COUNT(*) FROM entries
WHERE account_id = $1
`

func (q *Queries) GetEntriesCount(ctx context.Context, accountID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getEntriesCount, accountID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getEntriesSum = `-- name: GetEntriesSum :one
SELECT SUM(amount) FROM entries
WHERE account_id = $1
`

func (q *Queries) GetEntriesSum(ctx context.Context, accountID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getEntriesSum, accountID)
	var sum int64
	err := row.Scan(&sum)
	return sum, err
}

const getEntry = `-- name: GetEntry :one
SELECT id, account_id, amount, created_at FROM entries
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetEntry(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const updateEntryAmount = `-- name: UpdateEntryAmount :one
UPDATE entries
SET amount = $2
WHERE id = $1
RETURNING id, account_id, amount, created_at
`

type UpdateEntryAmountParams struct {
	ID     int64 `json:"id"`
	Amount int64 `json:"amount"`
}

func (q *Queries) UpdateEntryAmount(ctx context.Context, arg UpdateEntryAmountParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, updateEntryAmount, arg.ID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
